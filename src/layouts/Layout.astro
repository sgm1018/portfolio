---
import '@fontsource-variable/inter';

interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "Professional portfolio website showcasing my work and skills"
} = Astro.props;
---

<!doctype html>
<html lang="en" class="dark scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" type='text/css' href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css" />
    <title>{title}</title>
  </head>
  <body class="bg-background text-foreground">
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --background: #1A1B1E;
    --foreground: #FFFFFF;
    
    --primary: #FF1E56;
    --primary-foreground: #FFFFFF;
    --primary-50: #FFE5EC;
    --primary-100: #FFB8C9;
    --primary-200: #FF8AA7;
    --primary-300: #FF5C84;
    --primary-400: #FF2E62;
    --primary-500: #FF1E56;
    --primary-600: #CC1845;
    --primary-700: #991234;
    --primary-800: #660C23;
    --primary-900: #330611;

    --dark: #1A1B1E;
    --dark-50: #F8F9FA;
    --dark-100: #E9ECEF;
    --dark-200: #DEE2E6;
    --dark-300: #CED4DA;
    --dark-400: #ADB5BD;
    --dark-500: #6C757D;
    --dark-600: #495057;
    --dark-700: #343A40;
    --dark-800: #212529;
    --dark-900: #1A1B1E;
  }

  html {
    font-family: 'Inter Variable', system-ui, sans-serif;
    background: var(--background);
    background-size: 224px;
  }

  body {
    min-height: 100vh;
  }

  @media (prefers-reduced-motion: reduce) {
    :global(html) {
      scroll-behavior: auto;
    }

    *, ::before, ::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }

  .tech-icon {
    @apply w-20 h-20 rounded-full flex items-center justify-center bg-dark-800 border-2 border-dark-700 transition-all duration-300;
    animation: fadeIn 0.6s ease-out;
  }

  .tech-icon i {
    @apply text-4xl text-dark-300 transition-colors duration-300;
  }

  .tech-icon:hover {
    @apply border-primary;
    transform: translateY(-5px);
  }

  .tech-icon:hover i {
    @apply text-primary;
  }

  .timeline-dot::before {
    content: '';
    @apply absolute w-3 h-3 bg-primary rounded-full left-0 top-2 -translate-x-1/2;
    animation: pulse 2s infinite;
  }

  .timeline-line::after {
    content: '';
    @apply absolute w-0.5 bg-dark-700 left-0 top-5 bottom-0 -translate-x-1/2;
    animation: growDown 1s ease-out forwards;
    transform-origin: top center;
  }

  /* Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0% {
      transform: scale(1) translateX(-50%);
      opacity: 1;
    }
    50% {
      transform: scale(1.2) translateX(-40%);
      opacity: 0.7;
    }
    100% {
      transform: scale(1) translateX(-50%);
      opacity: 1;
    }
  }

  @keyframes growDown {
    from {
      transform: scaleY(0) translateX(-50%);
    }
    to {
      transform: scaleY(1) translateX(-50%);
    }
  }

  /* Lazy loading and skeleton styles */
  .lazy-image {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .lazy-image.loaded {
    opacity: 1;
  }

  .skeleton {
    background: linear-gradient(
      90deg,
      var(--dark-800) 0%,
      var(--dark-700) 50%,
      var(--dark-800) 100%
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Smooth section transitions */
  section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  section.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Button animations */
  .btn-primary {
    position: relative;
    overflow: hidden;
  }

  .btn-primary::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300px;
    height: 300px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transform: translate(-50%, -50%) scale(0);
    opacity: 0;
    transition: transform 0.6s, opacity 0.6s;
  }

  .btn-primary:active::after {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
    transition: 0s;
  }
</style>

<script>
  // Intersection Observer for section animations
  const sections = document.querySelectorAll('section');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, {
    threshold: 0.1
  });

  sections.forEach(section => {
    observer.observe(section);
  });

  // Lazy loading for images
  const lazyImages = document.querySelectorAll('img[loading="lazy"]');
  
  lazyImages.forEach(img => {
    img.classList.add('lazy-image');
    img.addEventListener('load', () => {
      img.classList.add('loaded');
    });
  });
</script>